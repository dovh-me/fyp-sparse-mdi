# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import generated.server_pb2 as server__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in server_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Hello = channel.unary_unary(
                '/Server/Hello',
                request_serializer=server__pb2.Test.SerializeToString,
                response_deserializer=server__pb2.Test.FromString,
                _registered_method=True)
        self.RegisterNode = channel.unary_stream(
                '/Server/RegisterNode',
                request_serializer=server__pb2.RegisterRequest.SerializeToString,
                response_deserializer=server__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.InformReady = channel.unary_unary(
                '/Server/InformReady',
                request_serializer=server__pb2.ReadyRequest.SerializeToString,
                response_deserializer=server__pb2.ReadyRequest.FromString,
                _registered_method=True)
        self.StartInference = channel.unary_unary(
                '/Server/StartInference',
                request_serializer=server__pb2.StartInferenceRequest.SerializeToString,
                response_deserializer=server__pb2.StartInferenceResponse.FromString,
                _registered_method=True)
        self.EndInference = channel.unary_unary(
                '/Server/EndInference',
                request_serializer=server__pb2.EndInferenceRequest.SerializeToString,
                response_deserializer=server__pb2.EndInferenceResponse.FromString,
                _registered_method=True)
        self.GetInferenceMetrics = channel.unary_unary(
                '/Server/GetInferenceMetrics',
                request_serializer=server__pb2.InferenceMetricsRequest.SerializeToString,
                response_deserializer=server__pb2.InferenceMetricsResponse.FromString,
                _registered_method=True)
        self.Ping = channel.unary_unary(
                '/Server/Ping',
                request_serializer=server__pb2.ServerPingRequest.SerializeToString,
                response_deserializer=server__pb2.ServerPingResponse.FromString,
                _registered_method=True)


class ServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Hello(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InformReady(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartInference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndInference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInferenceMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Hello': grpc.unary_unary_rpc_method_handler(
                    servicer.Hello,
                    request_deserializer=server__pb2.Test.FromString,
                    response_serializer=server__pb2.Test.SerializeToString,
            ),
            'RegisterNode': grpc.unary_stream_rpc_method_handler(
                    servicer.RegisterNode,
                    request_deserializer=server__pb2.RegisterRequest.FromString,
                    response_serializer=server__pb2.RegisterResponse.SerializeToString,
            ),
            'InformReady': grpc.unary_unary_rpc_method_handler(
                    servicer.InformReady,
                    request_deserializer=server__pb2.ReadyRequest.FromString,
                    response_serializer=server__pb2.ReadyRequest.SerializeToString,
            ),
            'StartInference': grpc.unary_unary_rpc_method_handler(
                    servicer.StartInference,
                    request_deserializer=server__pb2.StartInferenceRequest.FromString,
                    response_serializer=server__pb2.StartInferenceResponse.SerializeToString,
            ),
            'EndInference': grpc.unary_unary_rpc_method_handler(
                    servicer.EndInference,
                    request_deserializer=server__pb2.EndInferenceRequest.FromString,
                    response_serializer=server__pb2.EndInferenceResponse.SerializeToString,
            ),
            'GetInferenceMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInferenceMetrics,
                    request_deserializer=server__pb2.InferenceMetricsRequest.FromString,
                    response_serializer=server__pb2.InferenceMetricsResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=server__pb2.ServerPingRequest.FromString,
                    response_serializer=server__pb2.ServerPingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Server', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Server(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Hello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/Hello',
            server__pb2.Test.SerializeToString,
            server__pb2.Test.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/Server/RegisterNode',
            server__pb2.RegisterRequest.SerializeToString,
            server__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InformReady(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/InformReady',
            server__pb2.ReadyRequest.SerializeToString,
            server__pb2.ReadyRequest.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartInference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/StartInference',
            server__pb2.StartInferenceRequest.SerializeToString,
            server__pb2.StartInferenceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EndInference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/EndInference',
            server__pb2.EndInferenceRequest.SerializeToString,
            server__pb2.EndInferenceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInferenceMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/GetInferenceMetrics',
            server__pb2.InferenceMetricsRequest.SerializeToString,
            server__pb2.InferenceMetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/Ping',
            server__pb2.ServerPingRequest.SerializeToString,
            server__pb2.ServerPingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
